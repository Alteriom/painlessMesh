{
  "name": "AlteriomPainlessMesh",
  "version": "1.6.1",
  "authors": [
    {
      "name": "Scotty Franzyshen"
    },
    {
      "name": "Coopdis",
      "url": "https://github.com/Coopdis"
    },
    {
      "name": "Edwin van Leeuwen"
    },
    {
      "name": "Germán Martín"
    },
    {
      "name": "Maximilian Schwarz"
    },
    {
      "name": "Doanh Doanh"
    },
    {
      "name": "Alteriom",
      "maintainer": true,
      "url": "https://github.com/Alteriom"
    }
  ],
  "description": "painlessMesh is a user-friendly library for creating mesh networks with ESP8266 and ESP32 devices. This Alteriom fork includes additional packages for sensor data (SensorPackage), device commands (CommandPackage), and status monitoring (StatusPackage). It handles routing and network management automatically, so you can focus on your application. The library uses JSON-based messaging and syncs time across all nodes, making it ideal for coordinated behaviour like synchronized light displays or sensor networks reporting to a central node.",
  "homepage": "https://github.com/Alteriom/painlessMesh",
  "license": "LGPL-3.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/Alteriom/painlessMesh.git"
  },
  "dependencies": [
    {
      "owner": "esp32async",
      "name": "AsyncTCP",
      "version": "^3.4.7",
      "platforms": [
        "espressif32"
      ]
    },
    {
      "owner": "esp32async",
      "name": "ESPAsyncTCP",
      "version": "^2.0.0",
      "platforms": [
        "espressif8266"
      ]
    },
    {
      "owner": "bblanchon",
      "name": "ArduinoJson",
      "version": "^7.4.2"
    },
    {
      "owner": "arkhipenko",
      "name": "TaskScheduler",
      "version": "^4.0.0"
    }
  ],
  "export": {},
  "examples": [
    {
      "name": "alteriom",
      "base": "examples\\alteriom",
      "files": [
        "alteriom.ino",
        "alteriom_sensor_node.ino",
        "alteriom_sensor_package.hpp",
        "improved_sensor_node.ino",
        "platformio.ini",
        "README.md"
      ]
    },
    {
      "name": "basic",
      "base": "examples\\basic",
      "files": [
        "basic.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "bridge",
      "base": "examples\\bridge",
      "files": [
        "bridge.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "echoNode",
      "base": "examples\\echoNode",
      "files": [
        "echoNode.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "logClient",
      "base": "examples\\logClient",
      "files": [
        "logClient.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "logServer",
      "base": "examples\\logServer",
      "files": [
        "logServer.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "mqttBridge",
      "base": "examples\\mqttBridge",
      "files": [
        "mqttBridge.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "namedMesh",
      "base": "examples\\namedMesh",
      "files": [
        "namedMesh.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "otaReceiver",
      "base": "examples\\otaReceiver",
      "files": [
        "otaReceiver.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "otaSender",
      "base": "examples\\otaSender",
      "files": [
        "nodemcu32s_connections.JPG",
        "otaSender.ino",
        "platformio.ini"
      ]
    },
    {
      "name": "startHere",
      "base": "examples\\startHere",
      "files": [
        "platformio.ini",
        "startHere.ino"
      ]
    },
    {
      "name": "webServer",
      "base": "examples\\webServer",
      "files": [
        "platformio.ini",
        "webServer.ino"
      ]
    }
  ],
  "keywords": [
    "ethernet",
    "m2m",
    "iot",
    "mesh",
    "alteriom",
    "sensor",
    "esp32",
    "esp8266",
    "json",
    "time-sync",
    "wireless",
    "communication"
  ],
  "platforms": [
    "espressif8266",
    "espressif32"
  ],
  "frameworks": [
    "arduino"
  ],
  "headers": [
    "painlessMesh.h"
  ]
}